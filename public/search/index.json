[{"content":"静电放电防护（Electrostatic Discharge Protection）\r概述\r印制电路板（PCB）必须要做静电放电（ESD）防护，防护的位置主要针对 I/O 和 使用者可能接触到的地方。\nESD能量在开始积累的阶段需要经过一个较慢的过程（通常是数分或数秒），积累的静电能量存储在一个电容结构的物体中（人体、家具、未连接的导线），之后一个极快的速度将积累的电荷释放（通常在ns级的时间内）。这个ns范围的脉冲能量通常会产生一个 x00MHz ~ 1GHz 的EMI干扰。人体的静电放电（HDM模式）的放电上升时间大约是 200ps ~ 10ns，放电过程中的脉冲电流可能会达到 xA ~ 30A 甚至高的电流。由于静电放电的电流具有高速度（放电时间短），静电放电的能量谱密度有宽频谱范围的特点，ESD能量能够损坏电路、产生地弹、甚至通过电磁耦合引发电路故障。\n由ESD的上升时间和ESD电流大小，可以引出两个ESD的重要参数：\n电流峰值时的电压值 电流的变化率$\\frac{dI}{dt}$ 由ESD的上升时间也可以引出对应上升时间对应的频域公式：\n$$ f = \\frac{1}{\\pi * t_{r}} $$\n由该公式可以得出一个典型的 1ns 的静电放电能量对应的频域是 318MHz ，也可以据此计算出HDM模型的对应的频域范围是 30MHz ~ 1.6GHz。通常在对静电放电进行分析时可以将其等效为一个300MHz的信号。\nESD失效模型\r失效模型\r静电放电引发的故障可以大致地分为两类失效模型：元器件损坏和操作性能损坏。\n元器件损坏不一定是焊接在PCB之后才产生，生产、运输中的静电都可能导致元器件损坏。由ESD导致的元器件损坏通常有PN结击穿、完全烧毁或融化。这类的损伤是永久性的，通常表现为短路（会产生大量的热，可以通过红外成像仪进行检测）或电路的电压被钳在一个与正常工作电压不同的电压上。另一类轻微的ESD损伤不会立刻导致元器件的损坏，通常最初功能是完好的，有可能会因为静电、超出工作温度范围、过压工作等 导致电路功能逐渐不正常甚至永久失效，这类的潜伏损伤很难识别和解决。\n操作性能损伤可能由直接或间接的静电能量干扰导致。当ESD电流足够大时，电路会重新动作，从而引起操作性能损伤（未按照预期情况动作）。对于逻辑电路，静电的干扰可能会导致状态发生变化，从而引起逻辑错乱导致程序锁定或内存混乱。\n放电类型 说明 直接放电 放电设备直接对待测设备（EUT）进行的放电。这种放电可能时电源和电路之间的电接触放电（接触放电），也可能是通过空气对PCB上的金属物体放电（空气放电）。 间接放电 放电设备对EUT附近的金属物体放电，干扰由于电磁辐射耦合到电路中的情形。 元器件的损坏程度主要取决于设备的 静电能量损耗能力 和 器件的耐电压等级。这些参数通常称为ESD灵敏度。\nESD影响PCB的基本模型\r1. 直接放电\rESD电流对敏感电路直接放电引起扰动或损坏电路。这种情况在触摸PCB和数字元器件时会发生。在该模型下，来自外部的直接对元器件的放电可以携带能在成器件损坏的ESD能量，但是只需要使用很小的 串联电阻 或者 分流电容 就可以限制ESD电流。\n为了防护ESD对连接器放电导致内部敏感电路损坏，在连接器处使用滤波器消耗ESD能量，或将敏感电路的连接器远离外壳边缘使静电的路径变长都是必要的有效的方法。\n2.静电对接地系统直接放电\rESD电流流过地从而引起器件损坏或扰动。这种情况通常出现在底板和电路地直接连接的系统中。一旦ESD进入电路地，在PCB上的任何位置都有可能会引起问题。在该模型下，ESD电流不一定会损坏电路，但是ESD电流会从不可预知的路径经过，从而干扰电路的正常工作状态。\n对于这种模型下的ESD电流来说，较小的杂散电容（寄生电容）会成为一条低阻抗路径，而导线的电感太大将成为一条高阻抗路径。放电电流流过的使接地通道而不是信号通道。对于1ns上升时间的ESD来说，地阻抗可能就不是低阻抗，由此就会导致地弹。\n地弹或者参考0电位电的飘逸，可以驱动CMOS电路进入锁定状态。在锁定状态下，ESD实际上并为对电路中的元器件产生实质的损坏，在该状态下电源可能会损坏器件，或者在最好的情况下，电路变成一个在复位钳无法实现既定功能的电路。\n对于一个金属外壳的产品的电路，地弹问题可以通过确认所有可能接收到ESD能量的位置有一个低阻抗的接地方式连接到地（保证大地的可靠连接，保证地平面的完整性），为ESD能量提供一个低阻抗的泄放路径。\n对于一些塑料外壳的产品的电路，一方面需要隔离和隐藏电路上的金属部件避免直接放电，另一方面，金属部件如果需要与电路地连接，需要在金属部件与地之间接入一个 10k ~ 100k 的电阻以保证峰值电流连入时是一个高阻抗路径。这些电阻不会影响参考0电位。但是，如果金属部件之间放置过于紧密，由于金属之间的电容耦合起主要作用，此时电阻就不起作用了。\n3. 电磁场耦合引起的扰动（间接放电）\r该模型通常不会造成器件损坏，但是具有非常高阻抗的器件也可能在这种模型下损坏。在该模型下，仅有极小的能量会直接耦合到被干扰电路中，这种感应到的耦合电压通常不会对逻辑功能造成干扰。这种故障模式很大程度上取决于放电的上升时间（dI/dt）和电路的环路面积，而与屏蔽无关。\n这种间接放电是由强磁场对临近的电流环路耦合产生的。耦合的强度随环路面积的增加而增加。PCB的环路区域除了会引入外部磁场，也因此会允许辐射磁场进入内部电路。该模型通常发生在塑料外壳的产品上，其中外部放电通过直接耦合的方式耦合到内部电路中\n这种模型下减小ESD干扰的主要方法是减小PCB的环路面积（使用多层板或者优化两层板）。电缆和PCB的布线要尽可能地靠近金属回流的路径以尽量减小环路面积。\n4. 放电前由静电场引起的干扰\r这种干扰不像其他三种方式一样普遍，一般只会发生在高阻抗、高敏感的电路中。\n这种放电方式是在绝缘体上经过较长时间的电荷重组产生电压，如果这个电压足够大就会经过空气或绝缘物质快速击穿，产生ESD电弧。一般来说，这种放电方式在HDM模式的实验中一般是由于实验人员的不操作导致（静电实验需要对外壳是绝缘材料的产品定次数地使用接地的金属网接触放电）。\n由于ESD是一种瞬变现象，高速数字电路相比低速模拟电路和低带宽的数字电路更容易受到静电干扰。虽然在事实上ESD很少会对模拟电路的功能产生影响，但是仍然需要在设计模拟电路和数字电路时考虑ESD问题。特别是对与边沿时间小于3ns的数字电路。\n静电防护技术\rPCB的静电防护的基本理念是减少场的耦合，以下是几个常用的PCB适应EMC的技术，这些方案可以在一定程度上消除ESD的耦合和干扰：\n使用滤波器在源端削弱ESD能量； 利用滤波器在负载端削弱接收到的ESD能量； 将元器件相互分离以减小耦合； 降低电源和负载见耦合的效率； 通过调整ESD敏感器件的排布为垂直于ESD干扰去的方法减小耦合效率； 在元器件上方加入一个良好接地的金属屏蔽罩； 减少发和接收天线的阻抗以减小电场耦合； 增加天线阻抗以减小磁场耦合； 使信号线与地之间结构耦合 以上方法的第7条和第8条具有相反的实现方式因此在实践中较难同时实现，因此这两条具体根据那种方法做实现需要根据实际情况选择。\n设计的总体原则的优先次序如下：\n防止电荷直接进入PCB电路导致电路损坏； 防止静电电流产生的场带来的问题； 防止静电场的问题。 由于人能够与电路或系统接触的任何地方都可能会引起损坏，所以一个较为明确的思路是要保护所有线路，包括信号、电源和地路径。采用串联高阻抗的方式防止ESD电流进入PCB（串联电阻、串联铁氧体磁珠，串联电容滤波器等）。或者提供一个对地的低阻抗通路，使其接地阻抗变得非常低，从而使地弹不会成为主要问题。\n在电缆的屏蔽效果不好或者电缆没有屏蔽的情况下，就需要注意在模块级或者元器件级一直瞬态能量。对于一个低速模拟系统，其信号变化缓慢，进行ESD测试的时候需要接入一个低通滤波器以阻止ESD发生时的高频能量进入。\n当发生静电放电的电磁场耦合时，瞬态噪声是以共模形式耦合到系统的，这就意味着，耦合能量是在同一时间以相同的极性作用到所有电缆和连接器上的。这时可以在电缆上加装铁氧体磁芯、或在连接器附近假装共模电感等共模滤波器以抑制共模噪声。\n单层和双层PCB的ESD防护技术\r单层PCB和双层PCB很容易被直接放电或间接放电导致干扰或损坏。这类PCB能用的防ESD技术较少，做这类PCB的防护首先需要考虑阻止ESD传播到PCB。较高的接地阻抗和ESD干扰容易导致较高的地弹电压。\n对于单层和双层PCB，其接地阻抗较高时导致地弹的主要因素。因此在这类型的PCB中使用对地的滤波电容作用不大。如果没有一个能够转移ESD电流的良好接地平面或者0电位参考平面，那么每一条信号线都需要有高阻抗的串联元器件（减弱ESD能量，使ESD能量尽量多地消耗在串联地高阻抗元器件上）。\n一方面，这类PCB也可以使用一个外部的辅助接地平面，这个地平面需要尽可能近地靠近PCB，并且以尽可能低钻孔那个地方式与PCB上的地连接。这样相当于给PCB增加了一个完整的地平面，可以从一定程度上降低地线的阻抗\n另一方面，也需要控制这类PCB的环路面积，这需要有较好的元器件布局和布线。减小PCB的环路面积也与EMI问题有关。关于这一点可以遵循以下原则：\n电源线和地线采用紧邻布线的方式，使两者的间距达到最小 如果需要使用多个电源和接地线，要用网格的方式连接在一起。网格式布线会提供一个更小的环路区域。更小的环路面积可以提供较低的感应电流和磁场耦合。 信号线平行布线并相互靠近，以降低RF回路电流环路面积 信号线在布线的时候要尽可能地靠近地线。 在电源和地之间接入高频旁路电容，一边在ESD频率段（通常可以取300MHz）维持低阻抗值。需要注意的是，由于一般高频电容都是pf级别，一般不能应对大量的顺便电流，引线电感也可能因为这些旁路电容导致在ESD频段内失效。 多层PCB的ESD防护技术\r多层PCB的ESD防护可以分为三部分：元器件级、布局布线级、系统级。\n元器件级防护\r元器件级别的静电防护是防止ESD耦合到对干扰敏感的电路中去。瞬态抑制器件包括 分离元件 和 滤波器。\n1. 使用高压瓷片电容\r使用高压瓷片电容将放电的能量分流到EARTH上。电容需要放置在连接器的附近并且采用感抗尽可能低的引线连接方式。\n2. 使用雪崩二极管（TVS）\r防护TVS通常需要接到EARTH以获得最好的防护效果。对于浮地外接电源的系统也可以将TVS接到外部电源的公共地上。\n3. 使用LC滤波器\r使用衰减高频的ESD能量，用电容将高频的ESD能量分流到EARTH（或者外部公共地）。该方法可以同样可以防止EMI发射到外部线路中。在使用的时候需要将滤波器尽可能的靠近ESD源的位置。\n4. 增大电源和地之间的高自谐振频率的旁路电容\r旁路电容需要具有尽可能低的ESL和ESR（在ESD频率范围内能够提供较低的接地阻抗）。对于低频高脉冲的情况，在电源和地平面间使用多个旁路电容能够减少环路面积。对于高频ESD，电容器的容性减弱，同时会表现出一定的感性。\n5. 铁氧体、磁珠、共模电感（EMI滤波器）\r磁性材料可以较好地衰减ESD电流，还能增强对EMI的抑制。使用铁氧体磁铁在连接器处将电缆缠绕，以及在输入输出的线路上传入磁珠或EMI滤波器。\n6. 使用有钳位二极管防护的CMOS或TTL。\r可以将这些器件用于ESD敏感电路。\n7. 使用串联电阻限制ESD电流防护CMOS电路。\r这种方法主要是通过串联的电阻对ESD能量进行损耗。\n布局布线级防护\r1. 使用多层PCB并保证有完整的地平面\r需要让接地平面尽可能的靠近布线层，同时保证一个或多个完整的地平面，同时用尽可能多的地孔保证接地的低阻抗。\n2. 若不确定哪根导线是容易收到ESD干扰的，则最好在每个元器件的每个引脚都进行滤波\rESD包含快速的大电流脉冲但是能量小，因此不必使用尺寸很大的滤波元件。但是旁路电容不应该选择过小的容值，否则有可能会导致电容器快速充电到不可承受的电压值导致电容器损坏； 如果不能使用高频滤波器，必须使用TVS进行防护（MOV等响应速度较慢的器件无法对电路起到防护作用）； 不宜使用压敏电阻和电弧抑制元器件等响应速度过慢的器件做ESD防护； 模拟电路通常不需要进行ESD滤波，数字电路对ESD敏感必须进行滤波； 滤波器接电路地有较高的风险。只要可能，最好就将滤波器接到屏蔽罩上（EARTH）； 所有元件，特别是MCU和其他数字芯片都需要加旁路电容，特别要确保将旁路电容用于高阻抗反馈电路。 3. 保证多层PCB和连接器间尽量用阻抗较低的方式进行连接\r当一个PCB与另一个PCB通过连接器连接的时候，需要保证两者之间有足够的接地插针。\n4. 减少环路面积\r确定可能存在的环路电流的区域。这类区域包括 两个元器件之间的远距离空档区域、IO连接器 和 元器件/电源平面。环路面积既包括信号线（RF回路），也包括电源供电回路。\n5.电源和地之间需要紧密耦合\r在多层PCB中让电源平面和地平面尽可能靠近，或通过在电源和地之间接入具有高自谐振频率的退耦电容实现电源和地之间的紧密耦合。优先通过层叠方式使电源平面和地平面紧密耦合。\n6. 顶层和底层尽可能多地铺地\r这种方法的优点是提供了一个低阻抗路径。采用这种方法的缺点是ESD脉冲可能对接地系统直接放电，由此可能会产生地弹。\n采用这种方法必须要注意地附近是否有可能的引入干扰的区域，如果有这类区域需要尽可能远离干扰区域。\n如果PCB的外侧四周采用了地覆盖，要将地覆盖平面以多点间隔的方式连接到地平面或大地上。\n7. 在使用多层PCB时需要多打地孔\r多打地孔有助于减小地平面和内部线路之间的环路面积\n8. 在ESD敏感器件和其他功能区域之间加入开槽和隔离。\r需要注意，开槽增强ESD防护的原理是通过将完整的地平面隔开，从而增大在开槽区两侧在ESD频率范围内的地阻抗从而形成一个高阻抗的通路，一定程度上限制ESD电流从开槽区一侧传向另一侧，这种防护方式会影响到在ESD频率范围内甚至更高频的信号的信号完整性。\n9. 将瞬态保护器件连接到EARTH而不是系统地\r若连接到系统地中将会导致ESD的大电流进入系统提引起地弹导致器件损坏。在浮地外接电源的系统中，也可以将TVS接到外接电源的公共地上。\n10. 尽量减小布线长度\r根据线的长度不同，线在辐射发射（EMI）和敏感性方面都会对系统都会有不可忽略的影响。走线长度在特定的波长和谐波频率下是敏感的。如果是采用微带线的方式走线，走线将更容易接收到ESD能量。在对ESD干扰敏感的区域，将功能相似的组件尽可能相互靠近地分组是非常重要的。\n11. 使信号线尽可能地靠近地线、地平面\r信号线与地平面尽可能地接近可以通过信号线与地平面之间地寄生电容一定程度上将ESD能量通过一个相对更低阻抗的回路泄放。\n系统级防护\r对ESD干扰敏感的元器件和电路进行屏蔽。将屏蔽体多点牢固地连接到EARTH上，为屏蔽体吸收的ESD电流提供一个低阻抗的泄放通道。如果不容易实现屏蔽就要就行有效的绝缘； 内部线缆的布线需要避开缝隙和开口的位置； 保证EARTH的接地可靠性，尽量减少EARTH各接地点之间的阻抗差异； 在使用触摸按键的时候，需要将膜片的导电层凹进去，以免对数字电路直接放电； 将导电膜片层端接到外壳的屏蔽体上，在使用导电率相对较低的导电材料的时候也需要这么处理； 采用金属外壳的连接器，需要将连接器的外壳可靠地连接到EARTH上； 避免尾纤。除了是RF能量的辐射器之外，尾纤可以也看作是ESD的环形天线，会对ESD和EMI都产生影响。如果尾纤不能避免，必须要使其远离信号线和I/O线缆。不要将外壳的地使用线缆端接至PCB的接地结构（使用机箱接地）。 金属包边的ESD注意事项\r金属包边的使用旨在最小化PCB在塑料外壳内使用时的ESD风险和PCB被拿起时的ESD风险。当PCB被拿起时，PCB可能会获得静电电荷，静电电荷会通过辐射或传导两种方式传导到PCB的走线或元器件上。当对边带直接放电时，就会发生系统级的故障。\n为了防止ESD经辐射或传导耦合直接对元器件产生影响，可以在整个PCB四周（包括PCB顶层和底层）放置一个3.2mm的金属包边。金属包边到元器件或走线最少要有5mm的距离。这样的间距可以确保在保护边带和电路间被电压击穿时，两者不会发生ESD电弧放电。\n顶层包边和底层包边每13mm的距离需要用过孔连接。过孔确保两个包边能够相互牢固地连接在一起，并为ESD能量在两个边带之间提供一个最低阻抗的路径传输。\n由此引出一个问题，是否需要将金属包边与地平面连接？\n1. 金属包边与地平面连接的情况\r如果PCB时安装在一个金属机壳内，并且采用多点接地的方式连接到机壳内，保护边带需要接到地平面上（大地PE）。应用中保护边带和地平面连接的目的时让ESD能量能够顺一个非常低阻抗的路径到达金属大地PE。\n2. 金属包边不与地平面连接的情况\r如果PCB是被封装在一个塑料外壳内部，或者只在电源输入端单点连接到大地上，由于以下原因就不能将保护边带与大地连接：\n如果金属包边和地平面连接，地平面将产生高能量的地弹，能量将无处释放从而导致元器件永久性虽坏； 如果PCB单点接到电源输入连接器的地上，全部的ESD电流都将以尽可能低阻抗的方式流向连接器的接地点，该能量相当大，能够对路径上几乎所有元器件造成影响； 另外，金属包边不能连城一个封闭的环。如果金属包边是一个封闭的环路，对外部电磁环境来说就是一个磁场环路天线，一方面会对外辐射（EMI），另外一方面也更容易接收外部的干扰。\n如果PCB的开槽一直延伸到板边，金属包边就一定要在开槽处断开，截断的金属包边就不会继续对EMI和ESD性能产生影响了。另外，保护边带的过孔直径和截断处的宽度需要大于0.5mm。\n静电问题的排查思路\r在排查静电问题之前，首先需要形成一个认知，即 ESD问题是一个系统级问题，该问题与硬件工程师（所有情况下）、结构工程师（大部分情况下）、软件工程师（极个别情况下）都有关系。在实际的工作中个人遇到一部分结构工程师抱着静电只是硬件工程师需要考虑的想法，整改的时候不参与问题分析也不想参与，这样的想法其实是错误的。\n在进行最开始的硬件和结构设计的时候，就需要考虑到产品是否能够良好接地、产品的接口缝隙、产品缝隙附近是否有不可避免的金属器件、产品接口位置、接口类型等，这些问题都需要在产品设计的时候进行考虑，并需要硬件工程师与结构工程师进行良好的沟通。硬件工程师在进行原理图设计和PCB Layout的时候需要在靠近接口处加上合适的TVS、ESD器件（选择具有合适的最大钳压、有合适的峰值脉冲功率、结电容能够满足需求的型号）；在电源及容易受扰的线路上在靠近接口处加入相对较大的电容（对于开关电源需要注意其最大容性负载）；将内部铺铜、内部线路等尽量远离产品的缝隙或者其他可能引入干扰的位置。\n如果静电问题还是不可避免的发生了，可以遵循以下步骤进行排查：\n确认静电干扰导致产品失效的位置 这一步最为关键并经常会被一些人忽略，并归结为“偶发性失效”、“器件的静电抗扰性能差异”等从而未引起重视。一些静电问题通常触发的位置比较苛刻，且位置可能会相对比较难找。但即便如此还是应该在失效的位置多实验几次并使用多台样机相互对照。\n根据失效位置推ESD干扰模型 这一步需要根据 是否产生放电现象、ESD干扰施加位置附近器件及线路、失效状态的表现（操作性能损坏 or 器件损坏） 等进行综合分析。\n根据干扰模型、干扰位置的不同选择静电防护技术 一般来说可以在接口处换用峰值脉冲功率更大的TVS或ESD器件解决，但同时也需要关注器件的最大钳压是否合适。在线路上串联 1k~10k 的电阻也能够较为有效的降低ESD带来的大电流对器件的影响。在一些离缝隙较近的器件、线路在一定程度上也可以这么处理。但通常这么处理只是对接口更为有效。\n将静电干扰附近的铺铜或线路向板内缩（增大铺铜和线路到干扰位置的距离），结构上减小缝隙、增厚结构件、热熔胶将电路板上器件包裹住不暴露在空气中等，这些方法的思路是增长或阻断放电路径，这种方法通常能够对有放电现象、系统不直接接大地的系统有一定的效果。\n对于有直接接大地的产品，若干扰位置在本应接地的位置，则需要检查接地是否良好。需要检查器件本身的大地是否连接良好、硬件焊接是否良好、硬件大地与结构金属连接处是否良好、结构件是否能够良好接地。在确认好接地良好后，需要根据具体的失效表现，推测可能受到干扰的器件及干扰引入的原因，再进行整改。\n另外，对于两层板，一种最简单且有效的解决方法就是将两层板改为四层板，以增大 电源-地、线路-地 的耦合度，使静电干扰能够以最快速度泄放或使 电源-地、线路-地 之间的电压能够被钳压到安全的范围。\n重复实验直到问题解决 ","date":"2024-09-05T15:02:26+08:00","permalink":"https://Gaoxz03.github.io/p/%E9%9D%99%E7%94%B5%E6%94%BE%E7%94%B5%E9%98%B2%E6%8A%A4/","title":"静电放电防护"},{"content":"01_Python安装及包管理\r本文将主要就Windows操作系统和Linux操作系统中python的安装以及包管理相关操作进行说明。\nWindows操作系统的Python安装\rPython安装\r安装纯Python是个人相对来说更推荐的方法。相较于Anaconda体积更小，使用命令直接操作也比较便捷。而且Anaconda存在商用版本和社区版的区别，虽然对个人开发者和研究人员可以使用社区版，但相较于Python而言存在一定的法律风险。而且Anaconda所占的硬盘空间也较多。总之个人十分不推荐，即便它算是Python最成功的包管理及Python环境管理软件。\n首先，Python的安装包可以从下面的链接处下载：\nPython安装包 请务必注意，虽然Windows自带的 Microsoft Store 中也可以搜到Python，但是一定不要从里面安装！！！\n另外，虽然Windows现在可以使用winget进行类似Linux的软件安装，但是由于其默认的安装路径不可控，因此不推荐使用。\n确定Python版本\r在该页面下可以找到Python到目前为止的所有Windows系统的安装包。可以在该页面安装一些已经被Python官方停止支持的Python版本（部分项目会用到非最新的Python，有些上古项目甚至可能用到Python2）。\n选择Python版本的时候可以选择一个与项目组匹配的Python版本，如果只是自学也可以只安装最新的Python版本（一般尽量选择稳定版本）。\n选择完版本号后，还需要根据电脑的处理器架构选择正确的处理器版本。\n在此以Python 3.12.4为例，一般选择 Windows installer(64-bit) ，点击后即开始下载。\n安装\r由于本人已经安装过Python3.12，故后续以Python3.11做示例，一般来说Python的安装过程不会因版本变化产生较大差别。\n以管理员身份运行安装程序，将两个复选框勾选后点击Customize installation 除 for all user之外全部勾选，点击Next 勾选红框框中的4个复选框，并修改安装路径 由于本人使用的Python版本较少且C盘容量够大，一般建议在非系统盘的根目录建立单独的Python文件夹，在Python文件夹下再单独存放不同版本的Python。下面是一个示例\n1 2 3 4 5 D:\\Python ├─Python311 ├─Python312 ├─........ └─Python38 举个例子，本次安装的Python 3.11，在Customize install location中需要填入：\n1 D:\\Python\\Python311 点击Install即可完成安装。\n安装后的确认\r按Win键搜索Powershell，输入Python，如果能够正确输出如图的版本号则安装成功。\n若安装正确，则关闭当前窗口，或输入下面命令回车，即可退出。\n1 quit() 如果未正确输出，请查看下一节中关于环境变量的说明进行修改。\n多版本Python的安装及管理\r如果需要安装多个版本的Python，一般按照上述内容，重复 确定Python版本 \u0026ndash;\u0026gt; 安装即可。\n但是多个Python包安装后，其Python解释器的启动文件都叫python.exe，且这些多个版本的Python都在安装的时候选择了将各版本的python注册到系统的环境变量中。如果继续在Powershell中使用python来调用python可能就不能找到所需的Python版本。其解决方法已经被Python内置（安装时选择的 py launcher），其调用方法如下：\n1 py 输入该指令后，py launcher将从系统环境变量中查找安装的Python版本。如果没有任何的参数输入，将调用默认的Python版本。\n设置Python的默认版本的方法如下：\n按win键搜索 “环境变量” 在弹出的窗口点击“环境变量(N)” 如果在安装的时候没有勾选 Install Python for all users，则python的环境变量应保存在上半框中的Path中；如果安装的时候勾选了Install Python for all users，则python的环境变量应保存在下班框中的Path中。（是否勾选需要所有python版本在安装时保持一致） 双击Path变量，可以看到如下界面。以下图为例，可以看到本机共安装了 Python 3.12 和 Python 3.11 两个版本，且Python3.12的两个相关变量位于Path中更靠前的位置。假设本机只安装了这两个Python版本，Path变量这样的排列这意味着：在这台机器如果使用只使用 py 指令而不加任何其他参数，系统将优先调用3.12版本的Python（直接输入python也将调用3.12版本）。如果需要将3.11设置为默认版本，则需要分别选中python311的两个相关路径，点击右侧的 Move Up，让两个python311变量均在python312之前，并点击ok进行保存（三层都要点ok），保存完后关闭已打开的powershell重新打开，输入py 或者python就会调用3.11版本的Python。 对于安装之后在Powershell中输入python无反应的情况，需要在上图所示界面将python路径加入：\npython.exe所在的路径 pip.exe所在路径：python.exe所在路径的基础上加上\u0026quot;PYTHON_PATH\\Scripts\u0026quot; 关于py的使用下面给一个较为简单的说明：\n查看当前已成功安装的python版本：\n1 py --list 使用该命令后，输出的log如下：\n可以看到，示例电脑共安装了3.12、3.11、3.8三个python版本。想要调用具体版本的python，使用下面的命令：\n1 py -V:VERSION 下面给三个具体的示例：\n关于py指令的更多使用方法，使用如下命名查看：\n1 py --help pip包管理\r一般来说，很多python教程都会在安装包的时候建议直接输入下列命令进行包的安装：\n1 2 3 4 5 6 7 pip install PACKAGENAME #If above command can\u0026#39;t install package, use the command below python -m pip install PACKAGENAME #Recommend command py -V:VERSION -m pip install PACKAGENAME 但是如果使用这个方法安装所有包，在不同的项目中很容易因为包过多、每个包之间的依赖关系等问题带来问题。因此强烈不建议使用pip安装所有的包。\n但是，还是需要使用pip安装一些基础支持包和环境。\n建议安装的包如下：\nPackage Name Description wheel 安装类似Numpy之类的使用.whl格式的Python包 pipenv Python虚拟环境管理包 除这两个包之外，其他所有包都不建议直接使用pip安装，而是使用pipenv创建虚拟环境后在各项目的虚拟环境中单独安装。\n安装上述的这两个包，请在Powershell中下面的两个命令：\n1 2 3 4 5 6 7 8 9 10 11 12 13 #Install wheel pip install wheel #If above command can\u0026#39;t install package, use the command below python -m pip install wheel #Recommend command py -V:VERSION -m pip install wheel #Install pipenv pip install pipenv #If above command can\u0026#39;t install package, use the command below python -m pip install pipenv #Recommend command py -V:VERSION -m pip install pipenv 安装完成后，在Powershell中输入下一条命令：\n1 2 3 4 5 pip list #If above command can\u0026#39;t install package, use the command below python -m pip list #Recommend command py -V:VERSION -m pip list 输出的log如下所示：\n版本不需要与此处所示的版本相同，只需要保证包已安装完成即可。\n后续操作请转到共用操作出查看pipenv的具体使用及pip的相关指令。\nLinux安装Python\rPython安装\r对于初次使用Linux使用的新手，不建议上来就开始配置多版本的Python环境，本文将只对单版本的Python安装进行解释。\n一般的Linux发行版都会预装python，对于Linux可以先直接在bash中输入：\n1 python3 查看是否安装了python，如果没有类似Windows的python环境显示出来，则需要使用下列命令进行安装（需要注意的时，接下来的操作都将使用到管理员权限，没有管理员密码将无法操作）：\n1 2 3 4 5 6 7 8 #Debian \\ Ubuntu sudo apt-get install python3 #Arch Linux sudo pacman -S python3 #Red Hat / Cent OS sudo yum -y install python3 Linux 发行版一般不会预装pip，需要手动安装，安装pip的指令如下：\n1 2 3 4 5 6 7 8 #Debian \\ Ubuntu sudo apt-get install python3-pip #Arch Linux sudo pacman -S python3-pip #Red Hat / Cent OS sudo yum -y install python3-pip Linux环境下的Python包管理\r与Windows使用pip直接安装包不同，Linux中Python包采用的不同的发行策略，一般都需要使用系统的包管理软件进行安装。因此，安装pipenv和wheel需要使用对应的包管理软件指令进行安装。\n1 2 3 4 5 6 7 8 #Debian \\ Ubuntu sudo apt-get install pipenv python3-wheel #Arch Linux sudo pacman -S pipenv python3-wheel #Red Hat / Cent OS sudo yum -y install pipenv python3-wheel 安装完后，就可以使用pipenv进行环境配置了。\npipenv \u0026amp; pip\rpipenv\rpipenv是一个非常好用的python虚拟环境配置工具。这个工具可以实现为不同的工程设置不同的python版本、不同的python包依赖环境。同时对于Linux来说，还可以使用pip在虚拟环境中安装所需的python包，使得在Linux中需要使用的命令与Windows环境基本一致。\npipenv的官网如下：\npipenv pipenv 中文文档 关于pipenv的所有文档都在该网站。\n或者也可以在Powershell或者bash中输入下面的命令以得到一些基础参数的提示：\n1 pipenv --help 该命令的输出log如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 Usage: pipenv [OPTIONS] COMMAND [ARGS]... Options: --where Output project home information. --venv Output virtualenv information. --py Output Python interpreter information. --envs Output Environment Variable options. --rm Remove the virtualenv. --bare Minimal output. --man Display manpage. --support Output diagnostic information for use in GitHub issues. --site-packages / --no-site-packages Enable site-packages for the virtualenv. [env var: PIPENV_SITE_PACKAGES] --python TEXT Specify which version of Python virtualenv should use. --clear Clears caches (pipenv, pip). [env var: PIPENV_CLEAR] -q, --quiet Quiet mode. -v, --verbose Verbose mode. --pypi-mirror TEXT Specify a PyPI mirror. --version Show the version and exit. -h, --help Show this message and exit. Usage Examples: Create a new project using Python 3.7, specifically: $ pipenv --python 3.7 Remove project virtualenv (inferred from current directory): $ pipenv --rm Install all dependencies for a project (including dev): $ pipenv install --dev Create a lockfile containing pre-releases: $ pipenv lock --pre Show a graph of your installed dependencies: $ pipenv graph Check your installed dependencies for security vulnerabilities: $ pipenv check Install a local setup.py into your virtual environment/Pipfile: $ pipenv install -e . Use a lower-level pip command: $ pipenv run pip freeze Commands: check Checks for PyUp Safety security vulnerabilities and against PEP 508 markers provided in Pipfile. clean Uninstalls all packages not specified in Pipfile.lock. graph Displays currently-installed dependency graph information. install Installs provided packages and adds them to Pipfile, or (if no packages are given), installs all packages from Pipfile. lock Generates Pipfile.lock. open View a given module in your editor. requirements Generate a requirements.txt from Pipfile.lock. run Spawns a command installed into the virtualenv. scripts Lists scripts in current environment config. shell Spawns a shell within the virtualenv. sync Installs all packages specified in Pipfile.lock. uninstall Uninstalls a provided package and removes it from Pipfile. update Runs lock, then sync. upgrade Resolves provided packages and adds them to Pipfile, or (if no packages are given), merges results to Pipfile.lock verify Verify the hash in Pipfile.lock is up-to-date. 一般来说，比较常用的命令有：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #Use Default python version to create a virtual enviroment pipenv install #Use python VERSION to create a virtual enviroment pipenv --python VERSION #Open a shell in virtual enviroment pipenv shell #Already used \u0026#34;pipenv shell\u0026#34; command, want to quit this virtual enviroment exit #Remove virtual enviroment in current path pipenv -rm #Show all package in this virtual enviroment pipenv graph 其中需要特别提出的是，当使用了\u0026quot;pipenv shell\u0026quot;命令后，只要还没有使用\u0026quot;exit\u0026quot;，则在该环境中可以使用pip安装python包（不论是Windows还是Linux）。\n此处列出的仅仅只是pipenv极基础的用法，更多用法建议参考pipenv手册（Linux中使用 \u0026ldquo;man pipenv\u0026quot;或查看本节中列出的两个链接）。\npip\r上文实际上已经提及了pip的安装命令，本节将主要就pip安装包、卸载包、更新包、导出当前依赖包列表、pip自更新进行解释。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #Install a package #Only recommend in a virtual enviroment pip install PACKAGENAME #Uninstall a package #Only recommend in a virtual enviroment pip uninstall PACKAGENAME #List all package in current enviroment pip list #For a specific version python py -V:VERSION -m pip list #Only recommend in a virtual enviroment python -m pip install –-upgrade PACKAGENAME #Update pip py -V:VERSION -m pip --uppgrade pip #Freeze current pip package enviroment in requirements.txt at CURRENT PATH #Only recommend in a virtual enviroment #Use \u0026#34;pipenv shell\u0026#34; before using this command pip freeze \u0026gt; requirements.txt #Unfreeze a pip package enviroment from requirements.txt at CURRENT PATH #Only recommend in a virtual enviroment #Use \u0026#34;pipenv shell\u0026#34; before using this command pip install -r requirements.txt #For help pip --help 上面已经包含了一些常用的pip命令。这些命令不强求需要记住，只需要有一个大概的了解。在使用PyCharm进行开发的时候这些操作都可以使用图形化界面进行配置。但是还是需要有个印象，因为如果不使用PyCharm等现代IDE做项目开发的时候，或者极小可能的情况下IDE或网络抽风的情况下，只能使用命令行做应急的时候还是需要这些命令的。\n","date":"2024-06-27T00:39:27+08:00","permalink":"https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/","title":"Python安装及包管理"}]