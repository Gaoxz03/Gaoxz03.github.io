<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 双生介の个人博客</title>
        <link>https://Gaoxz03.github.io/post/</link>
        <description>Recent content in Posts on 双生介の个人博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Gaoxz</copyright>
        <lastBuildDate>Thu, 05 Sep 2024 15:02:26 +0800</lastBuildDate><atom:link href="https://Gaoxz03.github.io/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>静电放电防护</title>
        <link>https://Gaoxz03.github.io/p/%E9%9D%99%E7%94%B5%E6%94%BE%E7%94%B5%E9%98%B2%E6%8A%A4/</link>
        <pubDate>Thu, 05 Sep 2024 15:02:26 +0800</pubDate>
        
        <guid>https://Gaoxz03.github.io/p/%E9%9D%99%E7%94%B5%E6%94%BE%E7%94%B5%E9%98%B2%E6%8A%A4/</guid>
        <description>&lt;h1 id=&#34;静电放电防护electrostatic-discharge-protection&#34;&gt;静电放电防护（Electrostatic Discharge Protection）
&lt;/h1&gt;&lt;h2 id=&#34;概述&#34;&gt;概述
&lt;/h2&gt;&lt;p&gt;印制电路板（PCB）必须要做静电放电（ESD）防护，防护的位置主要针对 &lt;strong&gt;I/O&lt;/strong&gt; 和 &lt;strong&gt;使用者可能接触到的地方&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;ESD能量在开始积累的阶段需要经过一个较慢的过程（通常是数分或数秒），积累的静电能量存储在一个电容结构的物体中（人体、家具、未连接的导线），之后一个极快的速度将积累的电荷释放（通常在ns级的时间内）。这个ns范围的脉冲能量通常会产生一个 x00MHz ~ 1GHz 的EMI干扰。人体的静电放电（HDM模式）的放电上升时间大约是 200ps ~ 10ns，放电过程中的脉冲电流可能会达到 xA ~ 30A 甚至高的电流。由于静电放电的电流具有高速度（放电时间短），静电放电的能量谱密度有宽频谱范围的特点，ESD能量能够损坏电路、产生地弹、甚至通过电磁耦合引发电路故障。&lt;/p&gt;
&lt;p&gt;由ESD的上升时间和ESD电流大小，可以引出两个ESD的重要参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电流峰值时的电压值&lt;/li&gt;
&lt;li&gt;电流的变化率$\frac{dI}{dt}$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由ESD的上升时间也可以引出对应上升时间对应的频域公式：&lt;/p&gt;
&lt;p&gt;$$
f = \frac{1}{\pi * t_{r}}
$$&lt;/p&gt;
&lt;p&gt;由该公式可以得出一个典型的 1ns 的静电放电能量对应的频域是 318MHz ，也可以据此计算出HDM模型的对应的频域范围是 30MHz ~ 1.6GHz。通常在对静电放电进行分析时可以将其等效为一个300MHz的信号。&lt;/p&gt;
&lt;h2 id=&#34;esd失效模型&#34;&gt;ESD失效模型
&lt;/h2&gt;&lt;h3 id=&#34;失效模型&#34;&gt;失效模型
&lt;/h3&gt;&lt;p&gt;静电放电引发的故障可以大致地分为两类失效模型：元器件损坏和操作性能损坏。&lt;/p&gt;
&lt;p&gt;元器件损坏不一定是焊接在PCB之后才产生，生产、运输中的静电都可能导致元器件损坏。由ESD导致的元器件损坏通常有PN结击穿、完全烧毁或融化。这类的损伤是永久性的，通常表现为短路（会产生大量的热，可以通过红外成像仪进行检测）或电路的电压被钳在一个与正常工作电压不同的电压上。另一类轻微的ESD损伤不会立刻导致元器件的损坏，通常最初功能是完好的，有可能会因为静电、超出工作温度范围、过压工作等 导致电路功能逐渐不正常甚至永久失效，这类的潜伏损伤很难识别和解决。&lt;/p&gt;
&lt;p&gt;操作性能损伤可能由直接或间接的静电能量干扰导致。当ESD电流足够大时，电路会重新动作，从而引起操作性能损伤（未按照预期情况动作）。对于逻辑电路，静电的干扰可能会导致状态发生变化，从而引起逻辑错乱导致程序锁定或内存混乱。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;放电类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;直接放电&lt;/td&gt;
&lt;td&gt;放电设备直接对待测设备（EUT）进行的放电。这种放电可能时电源和电路之间的电接触放电（接触放电），也可能是通过空气对PCB上的金属物体放电（空气放电）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;间接放电&lt;/td&gt;
&lt;td&gt;放电设备对EUT附近的金属物体放电，干扰由于电磁辐射耦合到电路中的情形。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;元器件的损坏程度主要取决于设备的 &lt;strong&gt;静电能量损耗能力&lt;/strong&gt; 和 &lt;strong&gt;器件的耐电压等级&lt;/strong&gt;。这些参数通常称为ESD灵敏度。&lt;/p&gt;
&lt;h3 id=&#34;esd影响pcb的基本模型&#34;&gt;ESD影响PCB的基本模型
&lt;/h3&gt;&lt;h4 id=&#34;1-直接放电&#34;&gt;1. 直接放电
&lt;/h4&gt;&lt;p&gt;ESD电流对敏感电路直接放电引起扰动或损坏电路。这种情况在触摸PCB和数字元器件时会发生。在该模型下，来自外部的直接对元器件的放电可以携带能在成器件损坏的ESD能量，但是只需要使用很小的 &lt;strong&gt;串联电阻&lt;/strong&gt; 或者 &lt;strong&gt;分流电容&lt;/strong&gt; 就可以限制ESD电流。&lt;/p&gt;
&lt;p&gt;为了防护ESD对连接器放电导致内部敏感电路损坏，在连接器处使用滤波器消耗ESD能量，或将敏感电路的连接器远离外壳边缘使静电的路径变长都是必要的有效的方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Gaoxz03.github.io/p/%E9%9D%99%E7%94%B5%E6%94%BE%E7%94%B5%E9%98%B2%E6%8A%A4/01_Direct_discharge_into_circuit.png&#34;
	width=&#34;262&#34;
	height=&#34;221&#34;
	srcset=&#34;https://Gaoxz03.github.io/p/%E9%9D%99%E7%94%B5%E6%94%BE%E7%94%B5%E9%98%B2%E6%8A%A4/01_Direct_discharge_into_circuit_hu11838794202500992174.png 480w, https://Gaoxz03.github.io/p/%E9%9D%99%E7%94%B5%E6%94%BE%E7%94%B5%E9%98%B2%E6%8A%A4/01_Direct_discharge_into_circuit_hu5493363106187744453.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;118&#34;
		data-flex-basis=&#34;284px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;2静电对接地系统直接放电&#34;&gt;2.静电对接地系统直接放电
&lt;/h4&gt;&lt;p&gt;ESD电流流过地从而引起器件损坏或扰动。这种情况通常出现在底板和电路地直接连接的系统中。一旦ESD进入电路地，在PCB上的任何位置都有可能会引起问题。在该模型下，ESD电流不一定会损坏电路，但是ESD电流会从不可预知的路径经过，从而干扰电路的正常工作状态。&lt;/p&gt;
&lt;p&gt;对于这种模型下的ESD电流来说，较小的杂散电容（寄生电容）会成为一条低阻抗路径，而导线的电感太大将成为一条高阻抗路径。放电电流流过的使接地通道而不是信号通道。对于1ns上升时间的ESD来说，地阻抗可能就不是低阻抗，由此就会导致地弹。&lt;/p&gt;
&lt;p&gt;地弹或者参考0电位电的飘逸，可以驱动CMOS电路进入锁定状态。在锁定状态下，ESD实际上并为对电路中的元器件产生实质的损坏，在该状态下电源可能会损坏器件，或者在最好的情况下，电路变成一个在复位钳无法实现既定功能的电路。&lt;/p&gt;
&lt;p&gt;对于一个金属外壳的产品的电路，地弹问题可以通过确认所有可能接收到ESD能量的位置有一个低阻抗的接地方式连接到地（保证大地的可靠连接，保证地平面的完整性），为ESD能量提供一个低阻抗的泄放路径。&lt;/p&gt;
&lt;p&gt;对于一些塑料外壳的产品的电路，一方面需要隔离和隐藏电路上的金属部件避免直接放电，另一方面，金属部件如果需要与电路地连接，需要在金属部件与地之间接入一个 &lt;strong&gt;10k&lt;/strong&gt; ~ &lt;strong&gt;100k&lt;/strong&gt; 的电阻以保证峰值电流连入时是一个高阻抗路径。这些电阻不会影响参考0电位。&lt;em&gt;&lt;strong&gt;但是，如果金属部件之间放置过于紧密，由于金属之间的电容耦合起主要作用，此时电阻就不起作用了。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Gaoxz03.github.io/p/%E9%9D%99%E7%94%B5%E6%94%BE%E7%94%B5%E9%98%B2%E6%8A%A4/02_Direct_discharge_into_ground_system.png&#34;
	width=&#34;282&#34;
	height=&#34;221&#34;
	srcset=&#34;https://Gaoxz03.github.io/p/%E9%9D%99%E7%94%B5%E6%94%BE%E7%94%B5%E9%98%B2%E6%8A%A4/02_Direct_discharge_into_ground_system_hu7054252554631610363.png 480w, https://Gaoxz03.github.io/p/%E9%9D%99%E7%94%B5%E6%94%BE%E7%94%B5%E9%98%B2%E6%8A%A4/02_Direct_discharge_into_ground_system_hu3099107364071193619.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;127&#34;
		data-flex-basis=&#34;306px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;3-电磁场耦合引起的扰动间接放电&#34;&gt;3. 电磁场耦合引起的扰动（间接放电）
&lt;/h4&gt;&lt;p&gt;该模型通常不会造成器件损坏，但是具有非常高阻抗的器件也可能在这种模型下损坏。在该模型下，仅有极小的能量会直接耦合到被干扰电路中，这种感应到的耦合电压通常不会对逻辑功能造成干扰。这种故障模式很大程度上取决于放电的上升时间（dI/dt）和电路的环路面积，而与屏蔽无关。&lt;/p&gt;
&lt;p&gt;这种间接放电是由强磁场对临近的电流环路耦合产生的。耦合的强度随环路面积的增加而增加。PCB的环路区域除了会引入外部磁场，也因此会允许辐射磁场进入内部电路。该模型通常发生在塑料外壳的产品上，其中外部放电通过直接耦合的方式耦合到内部电路中&lt;/p&gt;
&lt;p&gt;这种模型下减小ESD干扰的主要方法是减小PCB的环路面积（使用多层板或者优化两层板）。电缆和PCB的布线要尽可能地靠近金属回流的路径以尽量减小环路面积。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Gaoxz03.github.io/p/%E9%9D%99%E7%94%B5%E6%94%BE%E7%94%B5%E9%98%B2%E6%8A%A4/03_Magnetic_field_Indriect_discharge.png&#34;
	width=&#34;382&#34;
	height=&#34;271&#34;
	srcset=&#34;https://Gaoxz03.github.io/p/%E9%9D%99%E7%94%B5%E6%94%BE%E7%94%B5%E9%98%B2%E6%8A%A4/03_Magnetic_field_Indriect_discharge_hu433469341798999062.png 480w, https://Gaoxz03.github.io/p/%E9%9D%99%E7%94%B5%E6%94%BE%E7%94%B5%E9%98%B2%E6%8A%A4/03_Magnetic_field_Indriect_discharge_hu13542074155814327659.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;140&#34;
		data-flex-basis=&#34;338px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;4-放电前由静电场引起的干扰&#34;&gt;4. 放电前由静电场引起的干扰
&lt;/h4&gt;&lt;p&gt;这种干扰不像其他三种方式一样普遍，一般只会发生在高阻抗、高敏感的电路中。&lt;/p&gt;
&lt;p&gt;这种放电方式是在绝缘体上经过较长时间的电荷重组产生电压，如果这个电压足够大就会经过空气或绝缘物质快速击穿，产生ESD电弧。一般来说，这种放电方式在HDM模式的实验中一般是由于实验人员的不操作导致（静电实验需要对外壳是绝缘材料的产品定次数地使用接地的金属网接触放电）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于ESD是一种瞬变现象，高速数字电路相比低速模拟电路和低带宽的数字电路更容易受到静电干扰。虽然在事实上ESD很少会对模拟电路的功能产生影响，但是仍然需要在设计模拟电路和数字电路时考虑ESD问题。特别是对与边沿时间小于3ns的数字电路。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;静电防护技术&#34;&gt;静电防护技术
&lt;/h2&gt;&lt;p&gt;PCB的静电防护的基本理念是减少场的耦合，以下是几个常用的PCB适应EMC的技术，这些方案可以在一定程度上消除ESD的耦合和干扰：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用滤波器在源端削弱ESD能量；&lt;/li&gt;
&lt;li&gt;利用滤波器在负载端削弱接收到的ESD能量；&lt;/li&gt;
&lt;li&gt;将元器件相互分离以减小耦合；&lt;/li&gt;
&lt;li&gt;降低电源和负载见耦合的效率；&lt;/li&gt;
&lt;li&gt;通过调整ESD敏感器件的排布为垂直于ESD干扰去的方法减小耦合效率；&lt;/li&gt;
&lt;li&gt;在元器件上方加入一个良好接地的金属屏蔽罩；&lt;/li&gt;
&lt;li&gt;减少发和接收天线的阻抗以减小电场耦合；&lt;/li&gt;
&lt;li&gt;增加天线阻抗以减小磁场耦合；&lt;/li&gt;
&lt;li&gt;使信号线与地之间结构耦合&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上方法的第7条和第8条具有相反的实现方式因此在实践中较难同时实现，因此这两条具体根据那种方法做实现需要根据实际情况选择。&lt;/p&gt;
&lt;p&gt;设计的总体原则的优先次序如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;防止电荷直接进入PCB电路导致电路损坏；&lt;/li&gt;
&lt;li&gt;防止静电电流产生的场带来的问题；&lt;/li&gt;
&lt;li&gt;防止静电场的问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于人能够与电路或系统接触的任何地方都可能会引起损坏，所以一个较为明确的思路是要保护所有线路，包括信号、电源和地路径。采用串联高阻抗的方式防止ESD电流进入PCB（串联电阻、串联铁氧体磁珠，串联电容滤波器等）。或者提供一个对地的低阻抗通路，使其接地阻抗变得非常低，从而使地弹不会成为主要问题。&lt;/p&gt;
&lt;p&gt;在电缆的屏蔽效果不好或者电缆没有屏蔽的情况下，就需要注意在模块级或者元器件级一直瞬态能量。对于一个低速模拟系统，其信号变化缓慢，进行ESD测试的时候需要接入一个低通滤波器以阻止ESD发生时的高频能量进入。&lt;/p&gt;
&lt;p&gt;当发生静电放电的电磁场耦合时，瞬态噪声是以共模形式耦合到系统的，这就意味着，耦合能量是在同一时间以相同的极性作用到所有电缆和连接器上的。这时可以在电缆上加装铁氧体磁芯、或在连接器附近假装共模电感等共模滤波器以抑制共模噪声。&lt;/p&gt;
&lt;h3 id=&#34;单层和双层pcb的esd防护技术&#34;&gt;单层和双层PCB的ESD防护技术
&lt;/h3&gt;&lt;p&gt;单层PCB和双层PCB很容易被直接放电或间接放电导致干扰或损坏。这类PCB能用的防ESD技术较少，做这类PCB的防护首先需要考虑阻止ESD传播到PCB。较高的接地阻抗和ESD干扰容易导致较高的地弹电压。&lt;/p&gt;
&lt;p&gt;对于单层和双层PCB，其接地阻抗较高时导致地弹的主要因素。因此在这类型的PCB中使用对地的滤波电容作用不大。如果没有一个能够转移ESD电流的良好接地平面或者0电位参考平面，那么每一条信号线都需要有高阻抗的串联元器件（减弱ESD能量，使ESD能量尽量多地消耗在串联地高阻抗元器件上）。&lt;/p&gt;
&lt;p&gt;一方面，这类PCB也可以使用一个外部的辅助接地平面，这个地平面需要尽可能近地靠近PCB，并且以尽可能低钻孔那个地方式与PCB上的地连接。这样相当于给PCB增加了一个完整的地平面，可以从一定程度上降低地线的阻抗&lt;/p&gt;
&lt;p&gt;另一方面，也需要控制这类PCB的环路面积，这需要有较好的元器件布局和布线。减小PCB的环路面积也与EMI问题有关。关于这一点可以遵循以下原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;电源线和地线采用紧邻布线的方式，使两者的间距达到最小&lt;/li&gt;
&lt;li&gt;如果需要使用多个电源和接地线，要用网格的方式连接在一起。网格式布线会提供一个更小的环路区域。更小的环路面积可以提供较低的感应电流和磁场耦合。&lt;/li&gt;
&lt;li&gt;信号线平行布线并相互靠近，以降低RF回路电流环路面积&lt;/li&gt;
&lt;li&gt;信号线在布线的时候要尽可能地靠近地线。&lt;/li&gt;
&lt;li&gt;在电源和地之间接入高频旁路电容，一边在ESD频率段（通常可以取300MHz）维持低阻抗值。&lt;strong&gt;需要注意的是，由于一般高频电容都是pf级别，一般不能应对大量的顺便电流，引线电感也可能因为这些旁路电容导致在ESD频段内失效。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://Gaoxz03.github.io/p/%E9%9D%99%E7%94%B5%E6%94%BE%E7%94%B5%E9%98%B2%E6%8A%A4/04_Loop_Area.png&#34;
	width=&#34;1236&#34;
	height=&#34;1002&#34;
	srcset=&#34;https://Gaoxz03.github.io/p/%E9%9D%99%E7%94%B5%E6%94%BE%E7%94%B5%E9%98%B2%E6%8A%A4/04_Loop_Area_hu9735615929989652482.png 480w, https://Gaoxz03.github.io/p/%E9%9D%99%E7%94%B5%E6%94%BE%E7%94%B5%E9%98%B2%E6%8A%A4/04_Loop_Area_hu14514829800869254883.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;123&#34;
		data-flex-basis=&#34;296px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Gaoxz03.github.io/p/%E9%9D%99%E7%94%B5%E6%94%BE%E7%94%B5%E9%98%B2%E6%8A%A4/05_Example_of_small_loop_area.png&#34;
	width=&#34;1102&#34;
	height=&#34;915&#34;
	srcset=&#34;https://Gaoxz03.github.io/p/%E9%9D%99%E7%94%B5%E6%94%BE%E7%94%B5%E9%98%B2%E6%8A%A4/05_Example_of_small_loop_area_hu6482147816155610447.png 480w, https://Gaoxz03.github.io/p/%E9%9D%99%E7%94%B5%E6%94%BE%E7%94%B5%E9%98%B2%E6%8A%A4/05_Example_of_small_loop_area_hu5143438633064163836.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;120&#34;
		data-flex-basis=&#34;289px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;多层pcb的esd防护技术&#34;&gt;多层PCB的ESD防护技术
&lt;/h3&gt;&lt;p&gt;多层PCB的ESD防护可以分为三部分：元器件级、布局布线级、系统级。&lt;/p&gt;
&lt;h4 id=&#34;元器件级防护&#34;&gt;元器件级防护
&lt;/h4&gt;&lt;p&gt;元器件级别的静电防护是防止ESD耦合到对干扰敏感的电路中去。瞬态抑制器件包括 &lt;strong&gt;分离元件&lt;/strong&gt; 和 &lt;strong&gt;滤波器&lt;/strong&gt;。&lt;/p&gt;
&lt;h5 id=&#34;1-使用高压瓷片电容&#34;&gt;1. 使用高压瓷片电容
&lt;/h5&gt;&lt;p&gt;使用高压瓷片电容将放电的能量分流到EARTH上。电容需要放置在连接器的附近并且采用感抗尽可能低的引线连接方式。&lt;/p&gt;
&lt;h5 id=&#34;2-使用雪崩二极管tvs&#34;&gt;2. 使用雪崩二极管（TVS）
&lt;/h5&gt;&lt;p&gt;防护TVS通常需要接到EARTH以获得最好的防护效果。对于浮地外接电源的系统也可以将TVS接到外部电源的公共地上。&lt;/p&gt;
&lt;h5 id=&#34;3-使用lc滤波器&#34;&gt;3. 使用LC滤波器
&lt;/h5&gt;&lt;p&gt;使用衰减高频的ESD能量，用电容将高频的ESD能量分流到EARTH（或者外部公共地）。该方法可以同样可以防止EMI发射到外部线路中。在使用的时候需要将滤波器尽可能的靠近ESD源的位置。&lt;/p&gt;
&lt;h5 id=&#34;4-增大电源和地之间的高自谐振频率的旁路电容&#34;&gt;4. 增大电源和地之间的高自谐振频率的旁路电容
&lt;/h5&gt;&lt;p&gt;旁路电容需要具有尽可能低的ESL和ESR（在ESD频率范围内能够提供较低的接地阻抗）。对于低频高脉冲的情况，在电源和地平面间使用多个旁路电容能够减少环路面积。对于高频ESD，电容器的容性减弱，同时会表现出一定的感性。&lt;/p&gt;
&lt;h5 id=&#34;5-铁氧体磁珠共模电感emi滤波器&#34;&gt;5. 铁氧体、磁珠、共模电感（EMI滤波器）
&lt;/h5&gt;&lt;p&gt;磁性材料可以较好地衰减ESD电流，还能增强对EMI的抑制。使用铁氧体磁铁在连接器处将电缆缠绕，以及在输入输出的线路上传入磁珠或EMI滤波器。&lt;/p&gt;
&lt;h5 id=&#34;6-使用有钳位二极管防护的cmos或ttl&#34;&gt;6. 使用有钳位二极管防护的CMOS或TTL。
&lt;/h5&gt;&lt;p&gt;可以将这些器件用于ESD敏感电路。&lt;/p&gt;
&lt;h5 id=&#34;7-使用串联电阻限制esd电流防护cmos电路&#34;&gt;7. 使用串联电阻限制ESD电流防护CMOS电路。
&lt;/h5&gt;&lt;p&gt;这种方法主要是通过串联的电阻对ESD能量进行损耗。&lt;/p&gt;
&lt;h4 id=&#34;布局布线级防护&#34;&gt;布局布线级防护
&lt;/h4&gt;&lt;h5 id=&#34;1-使用多层pcb并保证有完整的地平面&#34;&gt;1. 使用多层PCB并保证有完整的地平面
&lt;/h5&gt;&lt;p&gt;需要让接地平面尽可能的靠近布线层，同时保证一个或多个完整的地平面，同时用尽可能多的地孔保证接地的低阻抗。&lt;/p&gt;
&lt;h5 id=&#34;2-若不确定哪根导线是容易收到esd干扰的则最好在每个元器件的每个引脚都进行滤波&#34;&gt;2. 若不确定哪根导线是容易收到ESD干扰的，则最好在每个元器件的每个引脚都进行滤波
&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;ESD包含快速的大电流脉冲但是能量小，因此不必使用尺寸很大的滤波元件。但是旁路电容不应该选择过小的容值，否则有可能会导致电容器快速充电到不可承受的电压值导致电容器损坏；&lt;/li&gt;
&lt;li&gt;如果不能使用高频滤波器，必须使用TVS进行防护（MOV等响应速度较慢的器件无法对电路起到防护作用）；&lt;/li&gt;
&lt;li&gt;不宜使用压敏电阻和电弧抑制元器件等响应速度过慢的器件做ESD防护；&lt;/li&gt;
&lt;li&gt;模拟电路通常不需要进行ESD滤波，数字电路对ESD敏感必须进行滤波；&lt;/li&gt;
&lt;li&gt;滤波器接电路地有较高的风险。只要可能，最好就将滤波器接到屏蔽罩上（EARTH）；&lt;/li&gt;
&lt;li&gt;所有元件，特别是MCU和其他数字芯片都需要加旁路电容，特别要确保将旁路电容用于高阻抗反馈电路。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;3-保证多层pcb和连接器间尽量用阻抗较低的方式进行连接&#34;&gt;3. 保证多层PCB和连接器间尽量用阻抗较低的方式进行连接
&lt;/h5&gt;&lt;p&gt;当一个PCB与另一个PCB通过连接器连接的时候，需要保证两者之间有足够的接地插针。&lt;/p&gt;
&lt;h5 id=&#34;4-减少环路面积&#34;&gt;4. 减少环路面积
&lt;/h5&gt;&lt;p&gt;确定可能存在的环路电流的区域。这类区域包括 两个元器件之间的远距离空档区域、IO连接器 和 元器件/电源平面。环路面积既包括信号线（RF回路），也包括电源供电回路。&lt;/p&gt;
&lt;h5 id=&#34;5电源和地之间需要紧密耦合&#34;&gt;5.电源和地之间需要紧密耦合
&lt;/h5&gt;&lt;p&gt;在多层PCB中让电源平面和地平面尽可能靠近，或通过在电源和地之间接入具有高自谐振频率的退耦电容实现电源和地之间的紧密耦合。优先通过层叠方式使电源平面和地平面紧密耦合。&lt;/p&gt;
&lt;h5 id=&#34;6-顶层和底层尽可能多地铺地&#34;&gt;6. 顶层和底层尽可能多地铺地
&lt;/h5&gt;&lt;p&gt;这种方法的优点是提供了一个低阻抗路径。采用这种方法的缺点是ESD脉冲可能对接地系统直接放电，由此可能会产生地弹。&lt;/p&gt;
&lt;p&gt;采用这种方法必须要注意地附近是否有可能的引入干扰的区域，如果有这类区域需要尽可能远离干扰区域。&lt;/p&gt;
&lt;p&gt;如果PCB的外侧四周采用了地覆盖，要将地覆盖平面以多点间隔的方式连接到地平面或大地上。&lt;/p&gt;
&lt;h5 id=&#34;7-在使用多层pcb时需要多打地孔&#34;&gt;7. 在使用多层PCB时需要多打地孔
&lt;/h5&gt;&lt;p&gt;多打地孔有助于减小地平面和内部线路之间的环路面积&lt;/p&gt;
&lt;h5 id=&#34;8-在esd敏感器件和其他功能区域之间加入开槽和隔离&#34;&gt;8. 在ESD敏感器件和其他功能区域之间加入开槽和隔离。
&lt;/h5&gt;&lt;p&gt;需要注意，开槽增强ESD防护的原理是通过将完整的地平面隔开，从而增大在开槽区两侧在ESD频率范围内的地阻抗从而形成一个高阻抗的通路，一定程度上限制ESD电流从开槽区一侧传向另一侧，这种防护方式会影响到在ESD频率范围内甚至更高频的信号的信号完整性。&lt;/p&gt;
&lt;h5 id=&#34;9-将瞬态保护器件连接到earth而不是系统地&#34;&gt;9. 将瞬态保护器件连接到EARTH而不是系统地
&lt;/h5&gt;&lt;p&gt;若连接到系统地中将会导致ESD的大电流进入系统提引起地弹导致器件损坏。在浮地外接电源的系统中，也可以将TVS接到外接电源的公共地上。&lt;/p&gt;
&lt;h5 id=&#34;10-尽量减小布线长度&#34;&gt;10. 尽量减小布线长度
&lt;/h5&gt;&lt;p&gt;根据线的长度不同，线在辐射发射（EMI）和敏感性方面都会对系统都会有不可忽略的影响。走线长度在特定的波长和谐波频率下是敏感的。如果是采用微带线的方式走线，走线将更容易接收到ESD能量。在对ESD干扰敏感的区域，将功能相似的组件尽可能相互靠近地分组是非常重要的。&lt;/p&gt;
&lt;h5 id=&#34;11-使信号线尽可能地靠近地线地平面&#34;&gt;11. 使信号线尽可能地靠近地线、地平面
&lt;/h5&gt;&lt;p&gt;信号线与地平面尽可能地接近可以通过信号线与地平面之间地寄生电容一定程度上将ESD能量通过一个相对更低阻抗的回路泄放。&lt;/p&gt;
&lt;h4 id=&#34;系统级防护&#34;&gt;系统级防护
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;对ESD干扰敏感的元器件和电路进行屏蔽。将屏蔽体多点牢固地连接到EARTH上，为屏蔽体吸收的ESD电流提供一个低阻抗的泄放通道。如果不容易实现屏蔽就要就行有效的绝缘；&lt;/li&gt;
&lt;li&gt;内部线缆的布线需要避开缝隙和开口的位置；&lt;/li&gt;
&lt;li&gt;保证EARTH的接地可靠性，尽量减少EARTH各接地点之间的阻抗差异；&lt;/li&gt;
&lt;li&gt;在使用触摸按键的时候，需要将膜片的导电层凹进去，以免对数字电路直接放电；&lt;/li&gt;
&lt;li&gt;将导电膜片层端接到外壳的屏蔽体上，在使用导电率相对较低的导电材料的时候也需要这么处理；&lt;/li&gt;
&lt;li&gt;采用金属外壳的连接器，需要将连接器的外壳可靠地连接到EARTH上；&lt;/li&gt;
&lt;li&gt;避免尾纤。除了是RF能量的辐射器之外，尾纤可以也看作是ESD的环形天线，会对ESD和EMI都产生影响。如果尾纤不能避免，必须要使其远离信号线和I/O线缆。不要将外壳的地使用线缆端接至PCB的接地结构（使用机箱接地）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;金属包边的esd注意事项&#34;&gt;金属包边的ESD注意事项
&lt;/h2&gt;&lt;p&gt;金属包边的使用旨在最小化PCB在塑料外壳内使用时的ESD风险和PCB被拿起时的ESD风险。当PCB被拿起时，PCB可能会获得静电电荷，静电电荷会通过辐射或传导两种方式传导到PCB的走线或元器件上。当对边带直接放电时，就会发生系统级的故障。&lt;/p&gt;
&lt;p&gt;为了防止ESD经辐射或传导耦合直接对元器件产生影响，可以在整个PCB四周（包括PCB顶层和底层）放置一个3.2mm的金属包边。金属包边到元器件或走线最少要有5mm的距离。这样的间距可以确保在保护边带和电路间被电压击穿时，两者不会发生ESD电弧放电。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Gaoxz03.github.io/p/%E9%9D%99%E7%94%B5%E6%94%BE%E7%94%B5%E9%98%B2%E6%8A%A4/06_ESD_guard_band.png&#34;
	width=&#34;1063&#34;
	height=&#34;482&#34;
	srcset=&#34;https://Gaoxz03.github.io/p/%E9%9D%99%E7%94%B5%E6%94%BE%E7%94%B5%E9%98%B2%E6%8A%A4/06_ESD_guard_band_hu1958934940695557616.png 480w, https://Gaoxz03.github.io/p/%E9%9D%99%E7%94%B5%E6%94%BE%E7%94%B5%E9%98%B2%E6%8A%A4/06_ESD_guard_band_hu10472873697045126347.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;220&#34;
		data-flex-basis=&#34;529px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;顶层包边和底层包边每13mm的距离需要用过孔连接。过孔确保两个包边能够相互牢固地连接在一起，并为ESD能量在两个边带之间提供一个最低阻抗的路径传输。&lt;/p&gt;
&lt;p&gt;由此引出一个问题，是否需要将金属包边与地平面连接？&lt;/p&gt;
&lt;h3 id=&#34;1-金属包边与地平面连接的情况&#34;&gt;1. 金属包边与地平面连接的情况
&lt;/h3&gt;&lt;p&gt;如果PCB时安装在一个金属机壳内，并且采用多点接地的方式连接到机壳内，保护边带需要接到地平面上（大地PE）。应用中保护边带和地平面连接的目的时让ESD能量能够顺一个非常低阻抗的路径到达金属大地PE。&lt;/p&gt;
&lt;h3 id=&#34;2-金属包边不与地平面连接的情况&#34;&gt;2. 金属包边不与地平面连接的情况
&lt;/h3&gt;&lt;p&gt;如果PCB是被封装在一个塑料外壳内部，或者只在电源输入端单点连接到大地上，由于以下原因就不能将保护边带与大地连接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果金属包边和地平面连接，地平面将产生高能量的地弹，能量将无处释放从而导致元器件永久性虽坏；&lt;/li&gt;
&lt;li&gt;如果PCB单点接到电源输入连接器的地上，全部的ESD电流都将以尽可能低阻抗的方式流向连接器的接地点，该能量相当大，能够对路径上几乎所有元器件造成影响；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，金属包边不能连城一个封闭的环。如果金属包边是一个封闭的环路，对外部电磁环境来说就是一个磁场环路天线，一方面会对外辐射（EMI），另外一方面也更容易接收外部的干扰。&lt;/p&gt;
&lt;p&gt;如果PCB的开槽一直延伸到板边，金属包边就一定要在开槽处断开，截断的金属包边就不会继续对EMI和ESD性能产生影响了。另外，保护边带的过孔直径和截断处的宽度需要大于0.5mm。&lt;/p&gt;
&lt;h2 id=&#34;静电问题的排查思路&#34;&gt;静电问题的排查思路
&lt;/h2&gt;&lt;p&gt;在排查静电问题之前，首先需要形成一个认知，即 &lt;strong&gt;ESD问题是一个系统级问题，该问题与硬件工程师（所有情况下）、结构工程师（大部分情况下）、软件工程师（极个别情况下）都有关系&lt;/strong&gt;。在实际的工作中个人遇到一部分结构工程师抱着静电只是硬件工程师需要考虑的想法，整改的时候不参与问题分析也不想参与，这样的想法其实是错误的。&lt;/p&gt;
&lt;p&gt;在进行最开始的硬件和结构设计的时候，就需要考虑到产品是否能够良好接地、产品的接口缝隙、产品缝隙附近是否有不可避免的金属器件、产品接口位置、接口类型等，这些问题都需要在产品设计的时候进行考虑，并需要硬件工程师与结构工程师进行良好的沟通。硬件工程师在进行原理图设计和PCB Layout的时候需要在靠近接口处加上合适的TVS、ESD器件（选择具有合适的最大钳压、有合适的峰值脉冲功率、结电容能够满足需求的型号）；在电源及容易受扰的线路上在靠近接口处加入相对较大的电容（对于开关电源需要注意其最大容性负载）；将内部铺铜、内部线路等尽量远离产品的缝隙或者其他可能引入干扰的位置。&lt;/p&gt;
&lt;p&gt;如果静电问题还是不可避免的发生了，可以遵循以下步骤进行排查：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确认静电干扰导致产品失效的位置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这一步最为关键并经常会被一些人忽略，并归结为“偶发性失效”、“器件的静电抗扰性能差异”等从而未引起重视。一些静电问题通常触发的位置比较苛刻，且位置可能会相对比较难找。但即便如此还是应该在失效的位置多实验几次并使用多台样机相互对照。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;根据失效位置推ESD干扰模型&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这一步需要根据 是否产生放电现象、ESD干扰施加位置附近器件及线路、失效状态的表现（操作性能损坏 or 器件损坏） 等进行综合分析。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;根据干扰模型、干扰位置的不同选择静电防护技术&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一般来说可以在接口处换用峰值脉冲功率更大的TVS或ESD器件解决，但同时也需要关注器件的最大钳压是否合适。在线路上串联 1k~10k 的电阻也能够较为有效的降低ESD带来的大电流对器件的影响。在一些离缝隙较近的器件、线路在一定程度上也可以这么处理。但通常这么处理只是对接口更为有效。&lt;/p&gt;
&lt;p&gt;将静电干扰附近的铺铜或线路向板内缩（增大铺铜和线路到干扰位置的距离），结构上减小缝隙、增厚结构件、热熔胶将电路板上器件包裹住不暴露在空气中等，这些方法的思路是增长或阻断放电路径，这种方法通常能够对有放电现象、系统不直接接大地的系统有一定的效果。&lt;/p&gt;
&lt;p&gt;对于有直接接大地的产品，若干扰位置在本应接地的位置，则需要检查接地是否良好。需要检查器件本身的大地是否连接良好、硬件焊接是否良好、硬件大地与结构金属连接处是否良好、结构件是否能够良好接地。在确认好接地良好后，需要根据具体的失效表现，推测可能受到干扰的器件及干扰引入的原因，再进行整改。&lt;/p&gt;
&lt;p&gt;另外，对于两层板，一种最简单且有效的解决方法就是将两层板改为四层板，以增大 电源-地、线路-地 的耦合度，使静电干扰能够以最快速度泄放或使 电源-地、线路-地 之间的电压能够被钳压到安全的范围。&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;重复实验直到问题解决&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Python安装及包管理</title>
        <link>https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/</link>
        <pubDate>Thu, 27 Jun 2024 00:39:27 +0800</pubDate>
        
        <guid>https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/</guid>
        <description>&lt;h1 id=&#34;01_python安装及包管理&#34;&gt;01_Python安装及包管理
&lt;/h1&gt;&lt;p&gt;本文将主要就Windows操作系统和Linux操作系统中python的安装以及包管理相关操作进行说明。&lt;/p&gt;
&lt;h2 id=&#34;windows操作系统的python安装&#34;&gt;Windows操作系统的Python安装
&lt;/h2&gt;&lt;h3 id=&#34;python安装&#34;&gt;Python安装
&lt;/h3&gt;&lt;p&gt;安装纯Python是个人相对来说更推荐的方法。相较于Anaconda体积更小，使用命令直接操作也比较便捷。而且Anaconda存在商用版本和社区版的区别，虽然对个人开发者和研究人员可以使用社区版，但相较于Python而言存在一定的法律风险。而且Anaconda所占的硬盘空间也较多。&lt;del&gt;总之个人十分不推荐，即便它算是Python最成功的包管理及Python环境管理软件。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;首先，Python的安装包可以从下面的链接处下载：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.python.org/downloads/windows/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Python安装包&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;请务必注意，虽然Windows自带的 Microsoft Store 中也可以搜到Python，但是一定不要从里面安装！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;另外，虽然Windows现在可以使用winget进行类似Linux的软件安装，但是由于其默认的安装路径不可控，因此不推荐使用。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;确定python版本&#34;&gt;确定Python版本
&lt;/h4&gt;&lt;p&gt;在该页面下可以找到Python到目前为止的所有Windows系统的安装包。可以在该页面安装一些已经被Python官方停止支持的Python版本（部分项目会用到非最新的Python，有些上古项目甚至可能用到Python2）。&lt;/p&gt;
&lt;p&gt;选择Python版本的时候可以选择一个与项目组匹配的Python版本，如果只是自学也可以只安装最新的Python版本（一般尽量选择稳定版本）。&lt;/p&gt;
&lt;p&gt;选择完版本号后，还需要根据电脑的处理器架构选择正确的处理器版本。&lt;/p&gt;
&lt;p&gt;在此以Python 3.12.4为例，一般选择 Windows installer(64-bit) ，点击后即开始下载。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_01_Python_Download.png&#34;
	width=&#34;1597&#34;
	height=&#34;931&#34;
	srcset=&#34;https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_01_Python_Download_hu16727388761895171347.png 480w, https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_01_Python_Download_hu14428686652928336836.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;171&#34;
		data-flex-basis=&#34;411px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;安装&#34;&gt;安装
&lt;/h4&gt;&lt;p&gt;由于本人已经安装过Python3.12，故后续以Python3.11做示例，一般来说Python的安装过程不会因版本变化产生较大差别。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;以管理员身份运行安装程序，将两个复选框勾选后点击Customize installation&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_02_Python_Install_01.png&#34;
	width=&#34;1598&#34;
	height=&#34;977&#34;
	srcset=&#34;https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_02_Python_Install_01_hu2972580382409991939.png 480w, https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_02_Python_Install_01_hu16078369998638749204.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;163&#34;
		data-flex-basis=&#34;392px&#34;
	
&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;除 for all user之外全部勾选，点击Next&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_03_Python_Install_02.png&#34;
	width=&#34;1596&#34;
	height=&#34;982&#34;
	srcset=&#34;https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_03_Python_Install_02_hu15134695763105785087.png 480w, https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_03_Python_Install_02_hu11782191592856061942.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;162&#34;
		data-flex-basis=&#34;390px&#34;
	
&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;勾选红框框中的4个复选框，并修改安装路径&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_04_Python_Install_03.png&#34;
	width=&#34;1592&#34;
	height=&#34;984&#34;
	srcset=&#34;https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_04_Python_Install_03_hu12695787667555792582.png 480w, https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_04_Python_Install_03_hu18340673752270925031.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;161&#34;
		data-flex-basis=&#34;388px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于本人使用的Python版本较少且C盘容量够大，一般建议在非系统盘的根目录建立单独的Python文件夹，在Python文件夹下再单独存放不同版本的Python。下面是一个示例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;D:\Python
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	├─Python311
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	├─Python312
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	├─........
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	└─Python38
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;举个例子，本次安装的Python 3.11，在Customize install location中需要填入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;D:&lt;span class=&#34;se&#34;&gt;\P&lt;/span&gt;ython&lt;span class=&#34;se&#34;&gt;\P&lt;/span&gt;ython311
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;点击Install即可完成安装。&lt;/p&gt;
&lt;h4 id=&#34;安装后的确认&#34;&gt;安装后的确认
&lt;/h4&gt;&lt;p&gt;按Win键搜索Powershell，输入Python，如果能够正确输出如图的版本号则安装成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_05_Python_Check.png&#34;
	width=&#34;1591&#34;
	height=&#34;954&#34;
	srcset=&#34;https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_05_Python_Check_hu14515905844967417556.png 480w, https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_05_Python_Check_hu8430690654682646716.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;166&#34;
		data-flex-basis=&#34;400px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;若安装正确，则关闭当前窗口，或输入下面命令回车，即可退出。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;quit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果未正确输出，请查看下一节中关于环境变量的说明进行修改。&lt;/p&gt;
&lt;h4 id=&#34;多版本python的安装及管理&#34;&gt;多版本Python的安装及管理
&lt;/h4&gt;&lt;p&gt;如果需要安装多个版本的Python，一般按照上述内容，重复 确定Python版本 &amp;ndash;&amp;gt; 安装即可。&lt;/p&gt;
&lt;p&gt;但是多个Python包安装后，其Python解释器的启动文件都叫python.exe，且这些多个版本的Python都在安装的时候选择了将各版本的python注册到系统的环境变量中。如果继续在Powershell中使用python来调用python可能就不能找到所需的Python版本。其解决方法已经被Python内置（安装时选择的 py launcher），其调用方法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;输入该指令后，py launcher将从系统环境变量中查找安装的Python版本。如果没有任何的参数输入，将调用默认的Python版本。&lt;/p&gt;
&lt;p&gt;设置Python的默认版本的方法如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;按win键搜索 “环境变量”&lt;/li&gt;
&lt;li&gt;在弹出的窗口点击“环境变量(N)”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_07_enviroment.png&#34;
	width=&#34;1032&#34;
	height=&#34;1192&#34;
	srcset=&#34;https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_07_enviroment_hu17607527715114424284.png 480w, https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_07_enviroment_hu15400617413917072964.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;86&#34;
		data-flex-basis=&#34;207px&#34;
	
&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;如果在安装的时候没有勾选 Install Python for all users，则python的环境变量应保存在上半框中的Path中；如果安装的时候勾选了Install Python for all users，则python的环境变量应保存在下班框中的Path中。（是否勾选需要所有python版本在安装时保持一致）&lt;/li&gt;
&lt;li&gt;双击Path变量，可以看到如下界面。以下图为例，可以看到本机共安装了 Python 3.12 和 Python 3.11 两个版本，且Python3.12的两个相关变量位于Path中更靠前的位置。假设本机只安装了这两个Python版本，Path变量这样的排列这意味着：在这台机器如果使用只使用 py 指令而不加任何其他参数，系统将优先调用3.12版本的Python（直接输入python也将调用3.12版本）。如果需要将3.11设置为默认版本，则需要分别选中python311的两个相关路径，点击右侧的 Move Up，让两个python311变量均在python312之前，并点击ok进行保存（三层都要点ok），保存完后关闭已打开的powershell重新打开，输入py 或者python就会调用3.11版本的Python。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_08_path.png&#34;
	width=&#34;1198&#34;
	height=&#34;1315&#34;
	srcset=&#34;https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_08_path_hu12823248034339723259.png 480w, https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_08_path_hu101619475717042660.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;91&#34;
		data-flex-basis=&#34;218px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于安装之后在Powershell中输入python无反应的情况，需要在上图所示界面将python路径加入：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;python.exe所在的路径&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_09_python_path.png&#34;
	width=&#34;1509&#34;
	height=&#34;914&#34;
	srcset=&#34;https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_09_python_path_hu10069458345773757556.png 480w, https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_09_python_path_hu12512002295510162643.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;165&#34;
		data-flex-basis=&#34;396px&#34;
	
&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;pip.exe所在路径：python.exe所在路径的基础上加上&amp;quot;PYTHON_PATH\Scripts&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于py的使用下面给一个较为简单的说明：&lt;/p&gt;
&lt;p&gt;查看当前已成功安装的python版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;py --list
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;使用该命令后，输出的log如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_10_py_list.png&#34;
	width=&#34;1600&#34;
	height=&#34;962&#34;
	srcset=&#34;https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_10_py_list_hu17043986041849678139.png 480w, https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_10_py_list_hu3507356868522341743.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;166&#34;
		data-flex-basis=&#34;399px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到，示例电脑共安装了3.12、3.11、3.8三个python版本。想要调用具体版本的python，使用下面的命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;py -V:VERSION
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;下面给三个具体的示例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_11_py_version.png&#34;
	width=&#34;1605&#34;
	height=&#34;960&#34;
	srcset=&#34;https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_11_py_version_hu14276097498139219485.png 480w, https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_11_py_version_hu2953777722241710042.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;167&#34;
		data-flex-basis=&#34;401px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;关于py指令的更多使用方法，使用如下命名查看：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;py --help
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;pip包管理&#34;&gt;pip包管理
&lt;/h3&gt;&lt;p&gt;一般来说，很多python教程都会在安装包的时候建议直接输入下列命令进行包的安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install PACKAGENAME
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#If above command can&amp;#39;t install package, use the command below&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python -m pip install PACKAGENAME
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Recommend command&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;py -V:VERSION -m pip install PACKAGENAME
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;但是如果使用这个方法安装所有包，在不同的项目中很容易因为包过多、每个包之间的依赖关系等问题带来问题。因此强烈不建议使用pip安装所有的包。&lt;/p&gt;
&lt;p&gt;但是，还是需要使用pip安装一些基础支持包和环境。&lt;/p&gt;
&lt;p&gt;建议安装的包如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Package Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;wheel&lt;/td&gt;
&lt;td&gt;安装类似Numpy之类的使用.whl格式的Python包&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pipenv&lt;/td&gt;
&lt;td&gt;Python虚拟环境管理包&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;除这两个包之外，其他所有包都不建议直接使用pip安装，而是使用pipenv创建虚拟环境后在各项目的虚拟环境中单独安装。&lt;/p&gt;
&lt;p&gt;安装上述的这两个包，请在Powershell中下面的两个命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Install wheel&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install wheel
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#If above command can&amp;#39;t install package, use the command below&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python -m pip install wheel
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Recommend command&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;py -V:VERSION -m pip install wheel
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Install pipenv&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install pipenv
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#If above command can&amp;#39;t install package, use the command below&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python -m pip install pipenv
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Recommend command&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;py -V:VERSION -m pip install pipenv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;安装完成后，在Powershell中输入下一条命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip list
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#If above command can&amp;#39;t install package, use the command below&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python -m pip list
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Recommend command&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;py -V:VERSION -m pip list
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;输出的log如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_06_pip_list.png&#34;
	width=&#34;1606&#34;
	height=&#34;955&#34;
	srcset=&#34;https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_06_pip_list_hu14971038879006930973.png 480w, https://Gaoxz03.github.io/p/python%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8C%85%E7%AE%A1%E7%90%86/01_06_pip_list_hu13822207310389751614.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;168&#34;
		data-flex-basis=&#34;403px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;版本不需要与此处所示的版本相同，只需要保证包已安装完成即可。&lt;/p&gt;
&lt;p&gt;后续操作请转到共用操作出查看pipenv的具体使用及pip的相关指令。&lt;/p&gt;
&lt;h2 id=&#34;linux安装python&#34;&gt;Linux安装Python
&lt;/h2&gt;&lt;h3 id=&#34;python安装-1&#34;&gt;Python安装
&lt;/h3&gt;&lt;p&gt;对于初次使用Linux使用的新手，不建议上来就开始配置多版本的Python环境，本文将只对单版本的Python安装进行解释。&lt;/p&gt;
&lt;p&gt;一般的Linux发行版都会预装python，对于Linux可以先直接在bash中输入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;查看是否安装了python，如果没有类似Windows的python环境显示出来，则需要使用下列命令进行安装（需要注意的时，接下来的操作都将使用到管理员权限，没有管理员密码将无法操作）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Debian \ Ubuntu&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt-get install python3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Arch Linux&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo pacman -S python3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Red Hat / Cent OS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo yum -y install python3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Linux 发行版一般不会预装pip，需要手动安装，安装pip的指令如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Debian \ Ubuntu&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt-get install python3-pip
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Arch Linux&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo pacman -S python3-pip
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Red Hat / Cent OS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo yum -y install python3-pip
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;linux环境下的python包管理&#34;&gt;Linux环境下的Python包管理
&lt;/h3&gt;&lt;p&gt;与Windows使用pip直接安装包不同，Linux中Python包采用的不同的发行策略，一般都需要使用系统的包管理软件进行安装。因此，安装pipenv和wheel需要使用对应的包管理软件指令进行安装。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Debian \ Ubuntu&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt-get install pipenv python3-wheel
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Arch Linux&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo pacman -S pipenv python3-wheel
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Red Hat / Cent OS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo yum -y install pipenv python3-wheel
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;安装完后，就可以使用pipenv进行环境配置了。&lt;/p&gt;
&lt;h2 id=&#34;pipenv--pip&#34;&gt;pipenv &amp;amp; pip
&lt;/h2&gt;&lt;h3 id=&#34;pipenv&#34;&gt;pipenv
&lt;/h3&gt;&lt;p&gt;pipenv是一个非常好用的python虚拟环境配置工具。这个工具可以实现为不同的工程设置不同的python版本、不同的python包依赖环境。同时对于Linux来说，还可以使用pip在虚拟环境中安装所需的python包，使得在Linux中需要使用的命令与Windows环境基本一致。&lt;/p&gt;
&lt;p&gt;pipenv的官网如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://pipenv.pypa.io/en/latest/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;pipenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://pipenv.pypa.io/zh-cn/latest/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;pipenv 中文文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于pipenv的所有文档都在该网站。&lt;/p&gt;
&lt;p&gt;或者也可以在Powershell或者bash中输入下面的命令以得到一些基础参数的提示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pipenv --help
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;该命令的输出log如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Usage: pipenv &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;OPTIONS&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; COMMAND &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;ARGS&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Options:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --where                         Output project home information.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --venv                          Output virtualenv information.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --py                            Output Python interpreter information.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --envs                          Output Environment Variable options.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --rm                            Remove the virtualenv.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --bare                          Minimal output.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --man                           Display manpage.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --support                       Output diagnostic information &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; use in
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                  GitHub issues.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --site-packages / --no-site-packages
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                  Enable site-packages &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; the virtualenv.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                  &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;env var: PIPENV_SITE_PACKAGES&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --python TEXT                   Specify which version of Python virtualenv
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                  should use.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --clear                         Clears caches &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;pipenv, pip&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;.  &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;env var:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                  PIPENV_CLEAR&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -q, --quiet                     Quiet mode.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -v, --verbose                   Verbose mode.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --pypi-mirror TEXT              Specify a PyPI mirror.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --version                       Show the version and exit.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -h, --help                      Show this message and exit.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Usage Examples:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   Create a new project using Python 3.7, specifically:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   $ pipenv --python 3.7
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   Remove project virtualenv &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;inferred from current directory&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   $ pipenv --rm
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   Install all dependencies &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; a project &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;including dev&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   $ pipenv install --dev
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   Create a lockfile containing pre-releases:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   $ pipenv lock --pre
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   Show a graph of your installed dependencies:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   $ pipenv graph
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   Check your installed dependencies &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; security vulnerabilities:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   $ pipenv check
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   Install a &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; setup.py into your virtual environment/Pipfile:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   $ pipenv install -e .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   Use a lower-level pip command:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   $ pipenv run pip freeze
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Commands:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  check         Checks &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; PyUp Safety security vulnerabilities and against
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                PEP &lt;span class=&#34;m&#34;&gt;508&lt;/span&gt; markers provided in Pipfile.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  clean         Uninstalls all packages not specified in Pipfile.lock.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  graph         Displays currently-installed dependency graph information.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  install       Installs provided packages and adds them to Pipfile, or &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; no
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                packages are given&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, installs all packages from Pipfile.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  lock          Generates Pipfile.lock.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  open          View a given module in your editor.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  requirements  Generate a requirements.txt from Pipfile.lock.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  run           Spawns a &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt; installed into the virtualenv.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  scripts       Lists scripts in current environment config.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  shell         Spawns a shell within the virtualenv.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  sync          Installs all packages specified in Pipfile.lock.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  uninstall     Uninstalls a provided package and removes it from Pipfile.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  update        Runs lock, &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; sync.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  upgrade       Resolves provided packages and adds them to Pipfile, or &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; no
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                packages are given&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, merges results to Pipfile.lock
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  verify        Verify the &lt;span class=&#34;nb&#34;&gt;hash&lt;/span&gt; in Pipfile.lock is up-to-date.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;一般来说，比较常用的命令有：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Use Default python version to create a virtual enviroment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pipenv install
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Use python VERSION to create a virtual enviroment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pipenv --python VERSION
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Open a shell in virtual enviroment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pipenv shell
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Already used &amp;#34;pipenv shell&amp;#34; command, want to quit this virtual enviroment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Remove virtual enviroment in current path&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pipenv -rm
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Show all package in this virtual enviroment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pipenv graph
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;其中需要特别提出的是，当使用了&amp;quot;pipenv shell&amp;quot;命令后，只要还没有使用&amp;quot;exit&amp;quot;，则在该环境中可以使用pip安装python包（不论是Windows还是Linux）。&lt;/p&gt;
&lt;p&gt;此处列出的仅仅只是pipenv极基础的用法，更多用法建议参考pipenv手册（Linux中使用 &amp;ldquo;man pipenv&amp;quot;或查看本节中列出的两个链接）。&lt;/p&gt;
&lt;h3 id=&#34;pip&#34;&gt;pip
&lt;/h3&gt;&lt;p&gt;上文实际上已经提及了pip的安装命令，本节将主要就pip安装包、卸载包、更新包、导出当前依赖包列表、pip自更新进行解释。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Install a package&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Only recommend in a virtual enviroment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install PACKAGENAME
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Uninstall a package&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Only recommend in a virtual enviroment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip uninstall PACKAGENAME
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#List all package in current enviroment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip list
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#For a specific version python &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;py -V:VERSION -m pip list
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Only recommend in a virtual enviroment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python -m pip install –-upgrade PACKAGENAME
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Update pip&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;py -V:VERSION -m pip --uppgrade pip
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Freeze current pip package enviroment in requirements.txt at CURRENT PATH&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Only recommend in a virtual enviroment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Use &amp;#34;pipenv shell&amp;#34; before using this command&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip freeze &amp;gt; requirements.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Unfreeze a pip package enviroment from requirements.txt at CURRENT PATH&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Only recommend in a virtual enviroment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#Use &amp;#34;pipenv shell&amp;#34; before using this command&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install -r requirements.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#For help&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip --help
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;上面已经包含了一些常用的pip命令。这些命令不强求需要记住，只需要有一个大概的了解。在使用PyCharm进行开发的时候这些操作都可以使用图形化界面进行配置。但是还是需要有个印象，因为如果不使用PyCharm等现代IDE做项目开发的时候，或者极小可能的情况下IDE或网络抽风的情况下，只能使用命令行做应急的时候还是需要这些命令的。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
